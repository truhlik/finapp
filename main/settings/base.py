"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

import raven
from decouple import AutoConfig, Csv  # instance settings
from django.utils.translation import ugettext_lazy as _

config = AutoConfig(os.environ.get('DJANGO_CONFIG_ENV_DIR'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('PROJECT_SECRET_KEY', default='')

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

DEBUG = False
DEBUG_TOOLBAR = False
ALLOW_ROBOTS = True

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_PROTOCOL = 'http://'
BASE_URL = BASE_PROTOCOL + config('PROJECT_MAIN_DOMAIN', default='')
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=lambda v: [s.strip() for s in v.split(',')])

ADMINS = (('Endevel', 'support@endevel.cz'), )
MANAGERS = ADMINS


EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='')
DEFAULT_CONTACT_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_SUBJECT_PREFIX = ''
SERVER_EMAIL = 'info@endevel.cz'         # The email address that error messages come from
SEND_BROKEN_LINK_EMAILS = False

UPLOADED_ATTACHMENTS_DIR = u'/tmp/'

# Application definition

INSTALLED_APPS = [
    'main.apps.core',
    'main.apps.users',
    'main.apps.finapp',
    'main.apps.currencies',
    'main.apps.categories',
    'main.apps.institutions',
    'main.apps.products',
    'main.apps.portfolio',
    'main.apps.portfolio_values',

    'django.contrib.messages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.staticfiles',

    'django.contrib.postgres',
    'django_extensions',
    'django_filters',

    'raven.contrib.django.raven_compat',
    'constance',
    'constance.backends.database',
    'drf_yasg',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.apple',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# local DB
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('POSTGRESQL_DATABASE', default=''),
        'USER': config('POSTGRESQL_USER', default=''),
        'HOST': config('POSTGRESQL_HOST', default=''),
        'PORT': config('POSTGRESQL_PORT', default=''),
        'PASSWORD': config('POSTGRESQL_PASSWORD', default=''),
        'ATOMIC_REQUESTS': True,
        'CONN_MAX_AGE': 600,
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'cs-cz'

TIME_ZONE = 'Europe/Prague'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # do not use, if not creating multi TZ application

LANGUAGES = (
    ('cs', _('Czech')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
]

STATIC_ROOT = os.path.join(BASE_DIR, 'collected-static')
STATIC_URL = '/collected-static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Login settings

SITE_ID = 1

# allauth settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = BASE_PROTOCOL
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_SESSION_REMEMBER = False
# ACCOUNT_SIGNUP_FORM_CLASS = 'main.libraries.forms.SignupForm'
AUTH_USER_MODEL = 'users.User'
# ACCOUNT_ADAPTER = 'main.apps.libraries.adapter.AccountAdapter' # in case of custom adapter needed
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = LOGIN_REDIRECT_URL
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/confirmed/'
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False

SOCIALACCOUNT_QUERY_EMAIL = True        # user confirms her/his email after login with social app account
LOGIN_REDIRECT_URL = "/"
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'main.apps.users.serializers.UserRegisterSerializer',
    'PASSWORD_RESET_SERIALIZER': 'main.apps.users.serializers.CustomPasswordResetSerializer',
}
REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'main.apps.users.serializers.UserSerializer',
    'PASSWORD_RESET_SERIALIZER': 'main.apps.users.serializers.CustomPasswordResetSerializer',
}
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'main.libraries.pagination.CustomPageNumberPagination',
    'PAGE_SIZE': 20,
    'SEARCH_PARAM': 'q',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}
OLD_PASSWORD_FIELD_ENABLED = True


# Constance
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'  # this is needed if Redis is not used
CONSTANCE_CONFIG = {
}


###################
# Redis and cache #
###################


PATH_TO_LOGDIR = os.path.join(config('PROJECT_HOME_DIR', ''), 'log/')
os.makedirs(PATH_TO_LOGDIR, exist_ok=True)
DEBUG_LOG_FILE = os.path.join(PATH_TO_LOGDIR, 'debug.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d'
                      '%(thread)d <%(name)s|%(filename)s:%(lineno)s> %(message)s'
        },
        'plain': {
            'format': '%(asctime)s %(levelname)s <%(name)s> %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': DEBUG_LOG_FILE,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'plain',
        },
    },
    'loggers': {
        'main': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG'
        },
        '': {
            'handlers': ['console', 'file', ],  #
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

SHELL = "shell" in sys.argv or "shell_plus" in sys.argv

RAVEN_CONFIG = {
    'dsn': config('SENTRY_DSN', default=''),
    # If you are using git, you can also automatically configure the
    # release based on the git info.
#     'release': raven.fetch_git_sha(BASE_DIR),
    'environment': config('ENVIRONMENT', default=''),
    "ignore_exceptions": ("*", ) if SHELL else ()
}

###################
# Redis and cache #
###################

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': "redis://127.0.0.1:6379/{}".format(config('REDIS_DB', default='8')),
    },
}


CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ('cache-control', 'authorization', 'x-requested-with', 'content-type', 'access-control-allow-origin')
CORS_ORIGIN_WHITELIST = (BASE_URL, 'http://localhost:3000', 'https://tisknu.endevel.cz/')
CORS_URLS_REGEX = r'^/api/.*$'


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
        }
    },
    'USE_SESSION_AUTH': False,
}

